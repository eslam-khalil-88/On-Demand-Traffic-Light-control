
Traffic Light Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000aac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000b20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000b20  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015a9  00000000  00000000  00000cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d6  00000000  00000000  0000229d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e37  00000000  00000000  00002c73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000278  00000000  00000000  00003aac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e7  00000000  00000000  00003d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d66  00000000  00000000  0000430b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00005071  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 4a 03 	jmp	0x694	; 0x694 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <main>
  74:	0c 94 54 05 	jmp	0xaa8	; 0xaa8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <App_Start>:
 */ 
#include "App.h"

void App_Start(){
    /* Initialization for peripherals and DIO*/
    BUTTON_init(D , 2);
  7c:	62 e0       	ldi	r22, 0x02	; 2
  7e:	84 e0       	ldi	r24, 0x04	; 4
  80:	0e 94 4b 01 	call	0x296	; 0x296 <BUTTON_init>
    LED_Init();
  84:	0e 94 4f 01 	call	0x29e	; 0x29e <LED_Init>
    ExtINT_Init(0 , LEVEL);
  88:	61 e0       	ldi	r22, 0x01	; 1
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	0e 94 df 02 	call	0x5be	; 0x5be <ExtINT_Init>
                                       /***  Main Application  ***/
    while (1)
    {
	    PREV_color = YELLOW; //Holds previous color transition
	    CURRENT_color = RED;//Holds current color
	    seconds = 5;
  90:	d5 e0       	ldi	r29, 0x05	; 5
    
                                       /***  Main Application  ***/
    while (1)
    {
	    PREV_color = YELLOW; //Holds previous color transition
	    CURRENT_color = RED;//Holds current color
  92:	10 e0       	ldi	r17, 0x00	; 0
	//DIO_SET_PINDIRECTION(D, 5, OUTPUT); //Debugging
    
                                       /***  Main Application  ***/
    while (1)
    {
	    PREV_color = YELLOW; //Holds previous color transition
  94:	c1 e0       	ldi	r28, 0x01	; 1
	    //light_contrl = RED; // GREEN for pedestrian , RED for cars
	    
	    /***************************************************************/
	                         /* Normal Mode */
	    /***************************************************************/
	    while(GET_EXTINT_STATUS() == NORMAL_MODE){
  96:	73 c0       	rjmp	.+230    	; 0x17e <App_Start+0x102>
		    if(PREV_color == YELLOW && CURRENT_color == RED){
  98:	c1 30       	cpi	r28, 0x01	; 1
  9a:	b1 f4       	brne	.+44     	; 0xc8 <App_Start+0x4c>
  9c:	11 11       	cpse	r17, r1
  9e:	14 c0       	rjmp	.+40     	; 0xc8 <App_Start+0x4c>
			    // In case 5-seconds is not over yet
			    if(seconds > 0){
  a0:	dd 23       	and	r29, r29
  a2:	51 f0       	breq	.+20     	; 0xb8 <App_Start+0x3c>
				    LED_ON(A , 0);
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LED_ON>
				    TIMER0_DELAY(1000);//1000 ms timer delay
  ac:	88 ee       	ldi	r24, 0xE8	; 232
  ae:	93 e0       	ldi	r25, 0x03	; 3
  b0:	0e 94 59 03 	call	0x6b2	; 0x6b2 <TIMER0_DELAY>
					
				    seconds--;
  b4:	d1 50       	subi	r29, 0x01	; 1
	                         /* Normal Mode */
	    /***************************************************************/
	    while(GET_EXTINT_STATUS() == NORMAL_MODE){
		    if(PREV_color == YELLOW && CURRENT_color == RED){
			    // In case 5-seconds is not over yet
			    if(seconds > 0){
  b6:	63 c0       	rjmp	.+198    	; 0x17e <App_Start+0x102>
					
				    seconds--;
			    }
			    // When 5-seconds are over
			    else{
				    LED_OFF(A , 0);
  b8:	60 e0       	ldi	r22, 0x00	; 0
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LED_OFF>
				    seconds = 5;
  c0:	d5 e0       	ldi	r29, 0x05	; 5
				    PREV_color = RED; // Input next case, where current color is "YELLOW" and previous is "RED"
				    CURRENT_color = YELLOW;
  c2:	11 e0       	ldi	r17, 0x01	; 1
			    }
			    // When 5-seconds are over
			    else{
				    LED_OFF(A , 0);
				    seconds = 5;
				    PREV_color = RED; // Input next case, where current color is "YELLOW" and previous is "RED"
  c4:	c0 e0       	ldi	r28, 0x00	; 0
				    CURRENT_color = YELLOW;
				    continue;
  c6:	5b c0       	rjmp	.+182    	; 0x17e <App_Start+0x102>
			    }
		    }
		    
		    // Second case from RED to YELLOW
		    else if(PREV_color == RED && CURRENT_color == YELLOW){
  c8:	c1 11       	cpse	r28, r1
  ca:	16 c0       	rjmp	.+44     	; 0xf8 <App_Start+0x7c>
  cc:	11 30       	cpi	r17, 0x01	; 1
  ce:	a1 f4       	brne	.+40     	; 0xf8 <App_Start+0x7c>
			    if(seconds > 0){
  d0:	dd 23       	and	r29, r29
  d2:	51 f0       	breq	.+20     	; 0xe8 <App_Start+0x6c>
				    LED_ON(A , 1);
  d4:	61 e0       	ldi	r22, 0x01	; 1
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LED_ON>
				    //TIMER0_DELAY(1000);//1000 ms
				    
				    LED_Blink(A , 1);
  dc:	61 e0       	ldi	r22, 0x01	; 1
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	0e 94 77 01 	call	0x2ee	; 0x2ee <LED_Blink>
				    seconds--;
  e4:	d1 50       	subi	r29, 0x01	; 1
			    }
		    }
		    
		    // Second case from RED to YELLOW
		    else if(PREV_color == RED && CURRENT_color == YELLOW){
			    if(seconds > 0){
  e6:	4b c0       	rjmp	.+150    	; 0x17e <App_Start+0x102>
				    LED_Blink(A , 1);
				    seconds--;
			    }
			    // When 5-seconds are over
			    else{
				    LED_OFF(A , 1);
  e8:	61 e0       	ldi	r22, 0x01	; 1
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LED_OFF>
				    seconds = 5;
  f0:	d5 e0       	ldi	r29, 0x05	; 5
				    PREV_color = YELLOW;
				    CURRENT_color = GREEN;
  f2:	12 e0       	ldi	r17, 0x02	; 2
			    }
			    // When 5-seconds are over
			    else{
				    LED_OFF(A , 1);
				    seconds = 5;
				    PREV_color = YELLOW;
  f4:	c1 e0       	ldi	r28, 0x01	; 1
				    CURRENT_color = GREEN;
				    continue;
  f6:	43 c0       	rjmp	.+134    	; 0x17e <App_Start+0x102>
			    }
		    }
		    
		    // Third case from YELLOW to GREEN
		    else if(PREV_color == YELLOW && CURRENT_color == GREEN){
  f8:	c1 30       	cpi	r28, 0x01	; 1
  fa:	b1 f4       	brne	.+44     	; 0x128 <App_Start+0xac>
  fc:	12 30       	cpi	r17, 0x02	; 2
  fe:	a1 f4       	brne	.+40     	; 0x128 <App_Start+0xac>
			    if(seconds > 0){
 100:	dd 23       	and	r29, r29
 102:	51 f0       	breq	.+20     	; 0x118 <App_Start+0x9c>
				    LED_ON(A , 2);
 104:	62 e0       	ldi	r22, 0x02	; 2
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LED_ON>
				    TIMER0_DELAY(1000);//1000 ms
 10c:	88 ee       	ldi	r24, 0xE8	; 232
 10e:	93 e0       	ldi	r25, 0x03	; 3
 110:	0e 94 59 03 	call	0x6b2	; 0x6b2 <TIMER0_DELAY>
				    seconds--;
 114:	d1 50       	subi	r29, 0x01	; 1
			    }
		    }
		    
		    // Third case from YELLOW to GREEN
		    else if(PREV_color == YELLOW && CURRENT_color == GREEN){
			    if(seconds > 0){
 116:	33 c0       	rjmp	.+102    	; 0x17e <App_Start+0x102>
				    TIMER0_DELAY(1000);//1000 ms
				    seconds--;
			    }
			    // When 5-seconds are over
			    else{
				    LED_OFF(A , 2);
 118:	62 e0       	ldi	r22, 0x02	; 2
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LED_OFF>
				    seconds = 5;
 120:	d5 e0       	ldi	r29, 0x05	; 5
				    PREV_color = GREEN;
				    CURRENT_color = YELLOW;
 122:	11 e0       	ldi	r17, 0x01	; 1
			    }
			    // When 5-seconds are over
			    else{
				    LED_OFF(A , 2);
				    seconds = 5;
				    PREV_color = GREEN;
 124:	c2 e0       	ldi	r28, 0x02	; 2
				    CURRENT_color = YELLOW;
				    continue;
 126:	2b c0       	rjmp	.+86     	; 0x17e <App_Start+0x102>
			    }
		    }
		    //Fourth case from GREEN to YELLOW
		    else if(PREV_color == GREEN && CURRENT_color == YELLOW){
 128:	c2 30       	cpi	r28, 0x02	; 2
 12a:	b1 f4       	brne	.+44     	; 0x158 <App_Start+0xdc>
 12c:	11 30       	cpi	r17, 0x01	; 1
 12e:	a1 f4       	brne	.+40     	; 0x158 <App_Start+0xdc>
			    if(seconds > 0){
 130:	dd 23       	and	r29, r29
 132:	51 f0       	breq	.+20     	; 0x148 <App_Start+0xcc>
				    LED_ON(A , 1);
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LED_ON>
				    //TIMER0_DELAY(1000);//1000 ms
				    LED_Blink(A , 1);
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	0e 94 77 01 	call	0x2ee	; 0x2ee <LED_Blink>
				    seconds--;
 144:	d1 50       	subi	r29, 0x01	; 1
				    continue;
			    }
		    }
		    //Fourth case from GREEN to YELLOW
		    else if(PREV_color == GREEN && CURRENT_color == YELLOW){
			    if(seconds > 0){
 146:	1b c0       	rjmp	.+54     	; 0x17e <App_Start+0x102>
				    LED_Blink(A , 1);
				    seconds--;
			    }
			    // When 5-seconds are over
			    else{
				    LED_OFF(A , 1);
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LED_OFF>
				    seconds = 5;
 150:	d5 e0       	ldi	r29, 0x05	; 5
				    PREV_color = YELLOW;
				    CURRENT_color = RED;
 152:	10 e0       	ldi	r17, 0x00	; 0
			    }
			    // When 5-seconds are over
			    else{
				    LED_OFF(A , 1);
				    seconds = 5;
				    PREV_color = YELLOW;
 154:	c1 e0       	ldi	r28, 0x01	; 1
				    CURRENT_color = RED;
				    continue;
 156:	13 c0       	rjmp	.+38     	; 0x17e <App_Start+0x102>
			    }
		    }
		    //Fifth case from YELLOW to RED
		    else{
			    if(seconds > 0){
 158:	dd 23       	and	r29, r29
 15a:	51 f0       	breq	.+20     	; 0x170 <App_Start+0xf4>
				    LED_ON(A , 0);
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LED_ON>
				    TIMER0_DELAY(1000);//1000 ms
 164:	88 ee       	ldi	r24, 0xE8	; 232
 166:	93 e0       	ldi	r25, 0x03	; 3
 168:	0e 94 59 03 	call	0x6b2	; 0x6b2 <TIMER0_DELAY>
				    seconds--;
 16c:	d1 50       	subi	r29, 0x01	; 1
 16e:	07 c0       	rjmp	.+14     	; 0x17e <App_Start+0x102>
			    }
			    // When 5-seconds are over
			    else{
				    LED_OFF(A , 0);
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LED_OFF>
				    seconds = 5;
 178:	d5 e0       	ldi	r29, 0x05	; 5
				    PREV_color = RED;
				    CURRENT_color = YELLOW;
 17a:	11 e0       	ldi	r17, 0x01	; 1
			    }
			    // When 5-seconds are over
			    else{
				    LED_OFF(A , 0);
				    seconds = 5;
				    PREV_color = RED;
 17c:	c0 e0       	ldi	r28, 0x00	; 0
	    //light_contrl = RED; // GREEN for pedestrian , RED for cars
	    
	    /***************************************************************/
	                         /* Normal Mode */
	    /***************************************************************/
	    while(GET_EXTINT_STATUS() == NORMAL_MODE){
 17e:	0e 94 3b 03 	call	0x676	; 0x676 <GET_EXTINT_STATUS>
 182:	88 23       	and	r24, r24
 184:	09 f4       	brne	.+2      	; 0x188 <App_Start+0x10c>
 186:	88 cf       	rjmp	.-240    	; 0x98 <App_Start+0x1c>
 188:	80 c0       	rjmp	.+256    	; 0x28a <App_Start+0x20e>
	    /* Pedestrian Mode */
	    /***************************************************************/
	    while(GET_EXTINT_STATUS() == PED_MODE){
		    // In case Car's light is RED, pedestrians is green and allowed to pass
			
		    if(PREV_color == YELLOW && CURRENT_color == RED){
 18a:	c1 30       	cpi	r28, 0x01	; 1
 18c:	d1 f4       	brne	.+52     	; 0x1c2 <App_Start+0x146>
 18e:	11 11       	cpse	r17, r1
 190:	18 c0       	rjmp	.+48     	; 0x1c2 <App_Start+0x146>
			    LED_ON(A , 0);//Red light for cars
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LED_ON>
			    LED_ON(A , 7);//Green light for pedestrians
 19a:	67 e0       	ldi	r22, 0x07	; 7
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LED_ON>
			    
			    ExtINT_DISABLE(0);//Disable external interrupt to avoid repeated interrupts
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	0e 94 29 03 	call	0x652	; 0x652 <ExtINT_DISABLE>
			    
			    TIMER0_DELAY(5000);//count 5 seconds
 1a8:	88 e8       	ldi	r24, 0x88	; 136
 1aa:	93 e1       	ldi	r25, 0x13	; 19
 1ac:	0e 94 59 03 	call	0x6b2	; 0x6b2 <TIMER0_DELAY>
			    PREV_color = RED;
			    CURRENT_color = YELLOW;
			    LED_OFF(A , 0);//Red light for cars
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LED_OFF>
			    LED_OFF(A , 7);//Green light for pedestrians
 1b8:	67 e0       	ldi	r22, 0x07	; 7
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LED_OFF>
 1c0:	4e c0       	rjmp	.+156    	; 0x25e <App_Start+0x1e2>
			    //DIO_WRITE_PIN(D,5,1);
		    }
		    
		    // In case Car's light is yellow and going to be green, both must be yellow
		    else if(PREV_color == RED && CURRENT_color == YELLOW){
 1c2:	c1 11       	cpse	r28, r1
 1c4:	16 c0       	rjmp	.+44     	; 0x1f2 <App_Start+0x176>
 1c6:	11 30       	cpi	r17, 0x01	; 1
 1c8:	a1 f4       	brne	.+40     	; 0x1f2 <App_Start+0x176>
			    //LED_ON(A , 1);//Yellow light for cars
			    //LED_ON(A , 6);//Yellow light for pedestrians
			    
			    ExtINT_DISABLE(0);//Disable external interrupt to avoid repeated interrupts
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	0e 94 29 03 	call	0x652	; 0x652 <ExtINT_DISABLE>
			    
			    //TIMER0_DELAY(5000);//count 5 seconds
			    Double_LED_Blink(A , 1 , A , 6);
 1d0:	26 e0       	ldi	r18, 0x06	; 6
 1d2:	41 e0       	ldi	r20, 0x01	; 1
 1d4:	61 e0       	ldi	r22, 0x01	; 1
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	0e 94 98 01 	call	0x330	; 0x330 <Double_LED_Blink>
			    CURRENT_color = GREEN;
			    PREV_color = YELLOW;
			    LED_OFF(A , 1);//Turn off Red light for cars
 1dc:	61 e0       	ldi	r22, 0x01	; 1
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LED_OFF>
			    LED_OFF(A , 6);//Turn off Green light for pedestrians
 1e4:	66 e0       	ldi	r22, 0x06	; 6
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LED_OFF>
			    
			    ExtINT_DISABLE(0);//Disable external interrupt to avoid repeated interrupts
			    
			    //TIMER0_DELAY(5000);//count 5 seconds
			    Double_LED_Blink(A , 1 , A , 6);
			    CURRENT_color = GREEN;
 1ec:	12 e0       	ldi	r17, 0x02	; 2
			    PREV_color = YELLOW;
 1ee:	c1 e0       	ldi	r28, 0x01	; 1
			    LED_OFF(A , 1);//Turn off Red light for cars
			    LED_OFF(A , 6);//Turn off Green light for pedestrians
			    continue;
 1f0:	4c c0       	rjmp	.+152    	; 0x28a <App_Start+0x20e>
		    }
		    
		    // In case Car's light is Green, pedestrians must be Red and wait till Car's led is RED
		    else if(PREV_color == YELLOW && CURRENT_color == GREEN){
 1f2:	c1 30       	cpi	r28, 0x01	; 1
 1f4:	e1 f4       	brne	.+56     	; 0x22e <App_Start+0x1b2>
 1f6:	12 30       	cpi	r17, 0x02	; 2
 1f8:	d1 f4       	brne	.+52     	; 0x22e <App_Start+0x1b2>
			    LED_ON(A , 2);//Green light for cars
 1fa:	62 e0       	ldi	r22, 0x02	; 2
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LED_ON>
			    LED_ON(A , 5);//Red light for pedestrians
 202:	65 e0       	ldi	r22, 0x05	; 5
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LED_ON>
			    
			    ExtINT_DISABLE(0);//Disable external interrupt to avoid repeated interrupts
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	0e 94 29 03 	call	0x652	; 0x652 <ExtINT_DISABLE>
			    
			    TIMER0_DELAY(5000);//count 5 seconds
 210:	88 e8       	ldi	r24, 0x88	; 136
 212:	93 e1       	ldi	r25, 0x13	; 19
 214:	0e 94 59 03 	call	0x6b2	; 0x6b2 <TIMER0_DELAY>
			    CURRENT_color = YELLOW;
			    PREV_color = GREEN;
			    LED_OFF(A , 2);//Turn off Green light for cars
 218:	62 e0       	ldi	r22, 0x02	; 2
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LED_OFF>
			    LED_OFF(A , 5);//Turn off Red light for pedestrians
 220:	65 e0       	ldi	r22, 0x05	; 5
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LED_OFF>
			    LED_ON(A , 5);//Red light for pedestrians
			    
			    ExtINT_DISABLE(0);//Disable external interrupt to avoid repeated interrupts
			    
			    TIMER0_DELAY(5000);//count 5 seconds
			    CURRENT_color = YELLOW;
 228:	11 e0       	ldi	r17, 0x01	; 1
			    PREV_color = GREEN;
 22a:	c2 e0       	ldi	r28, 0x02	; 2
			    LED_OFF(A , 2);//Turn off Green light for cars
			    LED_OFF(A , 5);//Turn off Red light for pedestrians
			    continue;
 22c:	2e c0       	rjmp	.+92     	; 0x28a <App_Start+0x20e>
		    }
		    // In case Car's light is Yellow, and is going to be Green after 5-seconds, both must be Yellow and
		    // pedestrian to be ready to pass
		    else if (PREV_color == GREEN && CURRENT_color == YELLOW){
 22e:	c2 30       	cpi	r28, 0x02	; 2
 230:	b1 f4       	brne	.+44     	; 0x25e <App_Start+0x1e2>
 232:	11 30       	cpi	r17, 0x01	; 1
 234:	a1 f4       	brne	.+40     	; 0x25e <App_Start+0x1e2>
			    //LED_ON(A , 1);//Yellow light for cars
			    //LED_ON(A , 6);//Yellow light for pedestrians
			    
			    ExtINT_DISABLE(0);//Disable external interrupt to avoid repeated interrupts
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	0e 94 29 03 	call	0x652	; 0x652 <ExtINT_DISABLE>
			    
			    //TIMER0_DELAY(5000);//count 5 seconds
			    Double_LED_Blink(A , 1 , A , 6);
 23c:	26 e0       	ldi	r18, 0x06	; 6
 23e:	41 e0       	ldi	r20, 0x01	; 1
 240:	61 e0       	ldi	r22, 0x01	; 1
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	0e 94 98 01 	call	0x330	; 0x330 <Double_LED_Blink>
			    CURRENT_color = RED;
			    PREV_color = YELLOW;
			    LED_OFF(A , 1);//Turn off Yellow light for cars
 248:	61 e0       	ldi	r22, 0x01	; 1
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LED_OFF>
			    LED_OFF(A , 6);//Turn off Yellow light for pedestrians
 250:	66 e0       	ldi	r22, 0x06	; 6
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LED_OFF>
			    
			    ExtINT_DISABLE(0);//Disable external interrupt to avoid repeated interrupts
			    
			    //TIMER0_DELAY(5000);//count 5 seconds
			    Double_LED_Blink(A , 1 , A , 6);
			    CURRENT_color = RED;
 258:	10 e0       	ldi	r17, 0x00	; 0
			    PREV_color = YELLOW;
 25a:	c1 e0       	ldi	r28, 0x01	; 1
			    LED_OFF(A , 1);//Turn off Yellow light for cars
			    LED_OFF(A , 6);//Turn off Yellow light for pedestrians
			    continue;
 25c:	16 c0       	rjmp	.+44     	; 0x28a <App_Start+0x20e>
		    }
		    
		    
		    
		    // At the end, clear the button state to start a new normal mode and turn off all pedestrian LEDs
		    TIMER0_DELAY(500); // Delay to avoid changing state in short time
 25e:	84 ef       	ldi	r24, 0xF4	; 244
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	0e 94 59 03 	call	0x6b2	; 0x6b2 <TIMER0_DELAY>
		    CLEAR_EXTINT_STATUS();
 266:	0e 94 47 03 	call	0x68e	; 0x68e <CLEAR_EXTINT_STATUS>
		    ExtINT_ENABLE(0); // Re-enable external interrupt again
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 17 03 	call	0x62e	; 0x62e <ExtINT_ENABLE>
		    LED_OFF(A , 5);
 270:	65 e0       	ldi	r22, 0x05	; 5
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LED_OFF>
		    LED_OFF(A , 6);
 278:	66 e0       	ldi	r22, 0x06	; 6
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LED_OFF>
		    LED_OFF(A , 7);
 280:	67 e0       	ldi	r22, 0x07	; 7
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LED_OFF>
		    break;
 288:	03 cf       	rjmp	.-506    	; 0x90 <App_Start+0x14>
	    
	    
	    /***************************************************************/
	    /* Pedestrian Mode */
	    /***************************************************************/
	    while(GET_EXTINT_STATUS() == PED_MODE){
 28a:	0e 94 3b 03 	call	0x676	; 0x676 <GET_EXTINT_STATUS>
 28e:	81 30       	cpi	r24, 0x01	; 1
 290:	09 f4       	brne	.+2      	; 0x294 <App_Start+0x218>
 292:	7b cf       	rjmp	.-266    	; 0x18a <App_Start+0x10e>
 294:	fd ce       	rjmp	.-518    	; 0x90 <App_Start+0x14>

00000296 <BUTTON_init>:
 *  Author: Eslam
 */
#include "BUTTON.h" 

void BUTTON_init(uint8_t PORT , uint8_t PIN){
	DIO_SET_PINDIRECTION(PORT, PIN, INPUT);
 296:	40 e0       	ldi	r20, 0x00	; 0
 298:	0e 94 d6 01 	call	0x3ac	; 0x3ac <DIO_SET_PINDIRECTION>
 29c:	08 95       	ret

0000029e <LED_Init>:
#include "LED.h"



void LED_Init(void){
	DIO_SET_PORTDIRECTION(A, OUTPUT);
 29e:	61 e0       	ldi	r22, 0x01	; 1
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	0e 94 a8 02 	call	0x550	; 0x550 <DIO_SET_PORTDIRECTION>
	DIO_SET_PINDIRECTION(D, 7, OUTPUT);
 2a6:	41 e0       	ldi	r20, 0x01	; 1
 2a8:	67 e0       	ldi	r22, 0x07	; 7
 2aa:	84 e0       	ldi	r24, 0x04	; 4
 2ac:	0e 94 d6 01 	call	0x3ac	; 0x3ac <DIO_SET_PINDIRECTION>
 2b0:	08 95       	ret

000002b2 <LED_ON>:
}

void LED_ON(uint8_t PORT , uint8_t PIN){
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
 2b6:	c8 2f       	mov	r28, r24
 2b8:	d6 2f       	mov	r29, r22
	DIO_SET_PINDIRECTION(PORT, PIN, OUTPUT);
 2ba:	41 e0       	ldi	r20, 0x01	; 1
 2bc:	0e 94 d6 01 	call	0x3ac	; 0x3ac <DIO_SET_PINDIRECTION>
	DIO_WRITE_PIN(PORT , PIN , 1);
 2c0:	41 e0       	ldi	r20, 0x01	; 1
 2c2:	6d 2f       	mov	r22, r29
 2c4:	8c 2f       	mov	r24, r28
 2c6:	0e 94 47 02 	call	0x48e	; 0x48e <DIO_WRITE_PIN>
}
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	08 95       	ret

000002d0 <LED_OFF>:

void LED_OFF(uint8_t PORT , uint8_t PIN){
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	c8 2f       	mov	r28, r24
 2d6:	d6 2f       	mov	r29, r22
	DIO_SET_PINDIRECTION(PORT, PIN, OUTPUT);
 2d8:	41 e0       	ldi	r20, 0x01	; 1
 2da:	0e 94 d6 01 	call	0x3ac	; 0x3ac <DIO_SET_PINDIRECTION>
	DIO_WRITE_PIN(PORT , PIN , 0);
 2de:	40 e0       	ldi	r20, 0x00	; 0
 2e0:	6d 2f       	mov	r22, r29
 2e2:	8c 2f       	mov	r24, r28
 2e4:	0e 94 47 02 	call	0x48e	; 0x48e <DIO_WRITE_PIN>
}
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	08 95       	ret

000002ee <LED_Blink>:

// Blink a LED for 1-seconds
void LED_Blink(uint8_t PORT , uint8_t PIN){
 2ee:	1f 93       	push	r17
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	18 2f       	mov	r17, r24
 2f6:	d6 2f       	mov	r29, r22
	uint8_t ct = 2;
 2f8:	c2 e0       	ldi	r28, 0x02	; 2
	while(ct > 0){
 2fa:	14 c0       	rjmp	.+40     	; 0x324 <LED_Blink+0x36>
		if(ct%2 == 0){
 2fc:	c0 fd       	sbrc	r28, 0
 2fe:	09 c0       	rjmp	.+18     	; 0x312 <LED_Blink+0x24>
			LED_ON(PORT , PIN);
 300:	6d 2f       	mov	r22, r29
 302:	81 2f       	mov	r24, r17
 304:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LED_ON>
			TIMER0_DELAY(500);
 308:	84 ef       	ldi	r24, 0xF4	; 244
 30a:	91 e0       	ldi	r25, 0x01	; 1
 30c:	0e 94 59 03 	call	0x6b2	; 0x6b2 <TIMER0_DELAY>
 310:	08 c0       	rjmp	.+16     	; 0x322 <LED_Blink+0x34>
		}
		else{
			LED_OFF(PORT , PIN);
 312:	6d 2f       	mov	r22, r29
 314:	81 2f       	mov	r24, r17
 316:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LED_OFF>
			TIMER0_DELAY(500);
 31a:	84 ef       	ldi	r24, 0xF4	; 244
 31c:	91 e0       	ldi	r25, 0x01	; 1
 31e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <TIMER0_DELAY>
		}
		ct--;
 322:	c1 50       	subi	r28, 0x01	; 1
}

// Blink a LED for 1-seconds
void LED_Blink(uint8_t PORT , uint8_t PIN){
	uint8_t ct = 2;
	while(ct > 0){
 324:	c1 11       	cpse	r28, r1
 326:	ea cf       	rjmp	.-44     	; 0x2fc <LED_Blink+0xe>
			LED_OFF(PORT , PIN);
			TIMER0_DELAY(500);
		}
		ct--;
	}
}
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	1f 91       	pop	r17
 32e:	08 95       	ret

00000330 <Double_LED_Blink>:

// Blink 2 LEDs for 5-seconds interval
void Double_LED_Blink(uint8_t PORT_1 , uint8_t PIN_1 , uint8_t PORT_2 , uint8_t PIN_2){
 330:	ff 92       	push	r15
 332:	0f 93       	push	r16
 334:	1f 93       	push	r17
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
 33a:	f8 2e       	mov	r15, r24
 33c:	06 2f       	mov	r16, r22
 33e:	14 2f       	mov	r17, r20
 340:	d2 2f       	mov	r29, r18
	uint8_t ct = 10;
	DIO_SET_PINDIRECTION(A, 6, OUTPUT);
 342:	41 e0       	ldi	r20, 0x01	; 1
 344:	66 e0       	ldi	r22, 0x06	; 6
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	0e 94 d6 01 	call	0x3ac	; 0x3ac <DIO_SET_PINDIRECTION>
	DIO_SET_PINDIRECTION(A, 1, OUTPUT);
 34c:	41 e0       	ldi	r20, 0x01	; 1
 34e:	61 e0       	ldi	r22, 0x01	; 1
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	0e 94 d6 01 	call	0x3ac	; 0x3ac <DIO_SET_PINDIRECTION>
	}
}

// Blink 2 LEDs for 5-seconds interval
void Double_LED_Blink(uint8_t PORT_1 , uint8_t PIN_1 , uint8_t PORT_2 , uint8_t PIN_2){
	uint8_t ct = 10;
 356:	ca e0       	ldi	r28, 0x0A	; 10
	DIO_SET_PINDIRECTION(A, 6, OUTPUT);
	DIO_SET_PINDIRECTION(A, 1, OUTPUT);
	while(ct > 0){
 358:	1c c0       	rjmp	.+56     	; 0x392 <Double_LED_Blink+0x62>
		if(ct%2 == 0){
 35a:	c0 fd       	sbrc	r28, 0
 35c:	0d c0       	rjmp	.+26     	; 0x378 <Double_LED_Blink+0x48>
			LED_ON(PORT_1 , PIN_1);
 35e:	60 2f       	mov	r22, r16
 360:	8f 2d       	mov	r24, r15
 362:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LED_ON>
			LED_ON(PORT_2 , PIN_2);
 366:	6d 2f       	mov	r22, r29
 368:	81 2f       	mov	r24, r17
 36a:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LED_ON>
			TIMER0_DELAY(500);
 36e:	84 ef       	ldi	r24, 0xF4	; 244
 370:	91 e0       	ldi	r25, 0x01	; 1
 372:	0e 94 59 03 	call	0x6b2	; 0x6b2 <TIMER0_DELAY>
 376:	0c c0       	rjmp	.+24     	; 0x390 <Double_LED_Blink+0x60>
		}
		else{
			LED_OFF(PORT_1 , PIN_1);
 378:	60 2f       	mov	r22, r16
 37a:	8f 2d       	mov	r24, r15
 37c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LED_OFF>
			LED_OFF(PORT_2 , PIN_2);
 380:	6d 2f       	mov	r22, r29
 382:	81 2f       	mov	r24, r17
 384:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LED_OFF>
			TIMER0_DELAY(500);
 388:	84 ef       	ldi	r24, 0xF4	; 244
 38a:	91 e0       	ldi	r25, 0x01	; 1
 38c:	0e 94 59 03 	call	0x6b2	; 0x6b2 <TIMER0_DELAY>
		}
		ct--;
 390:	c1 50       	subi	r28, 0x01	; 1
// Blink 2 LEDs for 5-seconds interval
void Double_LED_Blink(uint8_t PORT_1 , uint8_t PIN_1 , uint8_t PORT_2 , uint8_t PIN_2){
	uint8_t ct = 10;
	DIO_SET_PINDIRECTION(A, 6, OUTPUT);
	DIO_SET_PINDIRECTION(A, 1, OUTPUT);
	while(ct > 0){
 392:	c1 11       	cpse	r28, r1
 394:	e2 cf       	rjmp	.-60     	; 0x35a <Double_LED_Blink+0x2a>
			LED_OFF(PORT_2 , PIN_2);
			TIMER0_DELAY(500);
		}
		ct--;
	}
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	1f 91       	pop	r17
 39c:	0f 91       	pop	r16
 39e:	ff 90       	pop	r15
 3a0:	08 95       	ret

000003a2 <main>:



int main(void)
{
    App_Start();
 3a2:	0e 94 3e 00 	call	0x7c	; 0x7c <App_Start>
	
	return 0;
}
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	08 95       	ret

000003ac <DIO_SET_PINDIRECTION>:
              }
        }


    return pin_data;
        }
 3ac:	82 30       	cpi	r24, 0x02	; 2
 3ae:	19 f1       	breq	.+70     	; 0x3f6 <DIO_SET_PINDIRECTION+0x4a>
 3b0:	18 f4       	brcc	.+6      	; 0x3b8 <DIO_SET_PINDIRECTION+0xc>
 3b2:	81 30       	cpi	r24, 0x01	; 1
 3b4:	39 f0       	breq	.+14     	; 0x3c4 <DIO_SET_PINDIRECTION+0x18>
 3b6:	69 c0       	rjmp	.+210    	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 3b8:	83 30       	cpi	r24, 0x03	; 3
 3ba:	b1 f1       	breq	.+108    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 3bc:	84 30       	cpi	r24, 0x04	; 4
 3be:	09 f4       	brne	.+2      	; 0x3c2 <DIO_SET_PINDIRECTION+0x16>
 3c0:	4c c0       	rjmp	.+152    	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 3c2:	63 c0       	rjmp	.+198    	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 3c4:	41 30       	cpi	r20, 0x01	; 1
 3c6:	59 f4       	brne	.+22     	; 0x3de <DIO_SET_PINDIRECTION+0x32>
 3c8:	2a b3       	in	r18, 0x1a	; 26
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <DIO_SET_PINDIRECTION+0x28>
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	6a 95       	dec	r22
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <DIO_SET_PINDIRECTION+0x24>
 3d8:	82 2b       	or	r24, r18
 3da:	8a bb       	out	0x1a, r24	; 26
 3dc:	56 c0       	rjmp	.+172    	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 3de:	2a b3       	in	r18, 0x1a	; 26
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_SET_PINDIRECTION+0x3e>
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	6a 95       	dec	r22
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_SET_PINDIRECTION+0x3a>
 3ee:	80 95       	com	r24
 3f0:	82 23       	and	r24, r18
 3f2:	8a bb       	out	0x1a, r24	; 26
 3f4:	4a c0       	rjmp	.+148    	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 3f6:	41 30       	cpi	r20, 0x01	; 1
 3f8:	59 f4       	brne	.+22     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3fa:	27 b3       	in	r18, 0x17	; 23
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	02 c0       	rjmp	.+4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	6a 95       	dec	r22
 408:	e2 f7       	brpl	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 40a:	82 2b       	or	r24, r18
 40c:	87 bb       	out	0x17, r24	; 23
 40e:	3d c0       	rjmp	.+122    	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 410:	27 b3       	in	r18, 0x17	; 23
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	02 c0       	rjmp	.+4      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	6a 95       	dec	r22
 41e:	e2 f7       	brpl	.-8      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 420:	80 95       	com	r24
 422:	82 23       	and	r24, r18
 424:	87 bb       	out	0x17, r24	; 23
 426:	31 c0       	rjmp	.+98     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 428:	41 30       	cpi	r20, 0x01	; 1
 42a:	59 f4       	brne	.+22     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 42c:	24 b3       	in	r18, 0x14	; 20
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	02 c0       	rjmp	.+4      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	6a 95       	dec	r22
 43a:	e2 f7       	brpl	.-8      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 43c:	82 2b       	or	r24, r18
 43e:	84 bb       	out	0x14, r24	; 20
 440:	24 c0       	rjmp	.+72     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 442:	24 b3       	in	r18, 0x14	; 20
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	02 c0       	rjmp	.+4      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	6a 95       	dec	r22
 450:	e2 f7       	brpl	.-8      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 452:	80 95       	com	r24
 454:	82 23       	and	r24, r18
 456:	84 bb       	out	0x14, r24	; 20
 458:	18 c0       	rjmp	.+48     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 45a:	41 30       	cpi	r20, 0x01	; 1
 45c:	59 f4       	brne	.+22     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 45e:	21 b3       	in	r18, 0x11	; 17
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	02 c0       	rjmp	.+4      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	6a 95       	dec	r22
 46c:	e2 f7       	brpl	.-8      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 46e:	82 2b       	or	r24, r18
 470:	81 bb       	out	0x11, r24	; 17
 472:	0b c0       	rjmp	.+22     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 474:	21 b3       	in	r18, 0x11	; 17
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	02 c0       	rjmp	.+4      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 47c:	88 0f       	add	r24, r24
 47e:	99 1f       	adc	r25, r25
 480:	6a 95       	dec	r22
 482:	e2 f7       	brpl	.-8      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 484:	80 95       	com	r24
 486:	82 23       	and	r24, r18
 488:	81 bb       	out	0x11, r24	; 17
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	08 95       	ret

0000048e <DIO_WRITE_PIN>:
 48e:	82 30       	cpi	r24, 0x02	; 2
 490:	f9 f0       	breq	.+62     	; 0x4d0 <DIO_WRITE_PIN+0x42>
 492:	18 f4       	brcc	.+6      	; 0x49a <DIO_WRITE_PIN+0xc>
 494:	81 30       	cpi	r24, 0x01	; 1
 496:	39 f0       	breq	.+14     	; 0x4a6 <DIO_WRITE_PIN+0x18>
 498:	59 c0       	rjmp	.+178    	; 0x54c <DIO_WRITE_PIN+0xbe>
 49a:	83 30       	cpi	r24, 0x03	; 3
 49c:	71 f1       	breq	.+92     	; 0x4fa <DIO_WRITE_PIN+0x6c>
 49e:	84 30       	cpi	r24, 0x04	; 4
 4a0:	09 f4       	brne	.+2      	; 0x4a4 <DIO_WRITE_PIN+0x16>
 4a2:	40 c0       	rjmp	.+128    	; 0x524 <DIO_WRITE_PIN+0x96>
 4a4:	53 c0       	rjmp	.+166    	; 0x54c <DIO_WRITE_PIN+0xbe>
 4a6:	2a b3       	in	r18, 0x1a	; 26
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <DIO_WRITE_PIN+0x24>
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	6a 95       	dec	r22
 4b4:	e2 f7       	brpl	.-8      	; 0x4ae <DIO_WRITE_PIN+0x20>
 4b6:	28 2b       	or	r18, r24
 4b8:	2a bb       	out	0x1a, r18	; 26
 4ba:	44 23       	and	r20, r20
 4bc:	21 f0       	breq	.+8      	; 0x4c6 <DIO_WRITE_PIN+0x38>
 4be:	9b b3       	in	r25, 0x1b	; 27
 4c0:	89 2b       	or	r24, r25
 4c2:	8b bb       	out	0x1b, r24	; 27
 4c4:	43 c0       	rjmp	.+134    	; 0x54c <DIO_WRITE_PIN+0xbe>
 4c6:	9b b3       	in	r25, 0x1b	; 27
 4c8:	80 95       	com	r24
 4ca:	89 23       	and	r24, r25
 4cc:	8b bb       	out	0x1b, r24	; 27
 4ce:	3e c0       	rjmp	.+124    	; 0x54c <DIO_WRITE_PIN+0xbe>
 4d0:	27 b3       	in	r18, 0x17	; 23
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <DIO_WRITE_PIN+0x4e>
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	6a 95       	dec	r22
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <DIO_WRITE_PIN+0x4a>
 4e0:	28 2b       	or	r18, r24
 4e2:	27 bb       	out	0x17, r18	; 23
 4e4:	44 23       	and	r20, r20
 4e6:	21 f0       	breq	.+8      	; 0x4f0 <DIO_WRITE_PIN+0x62>
 4e8:	98 b3       	in	r25, 0x18	; 24
 4ea:	89 2b       	or	r24, r25
 4ec:	88 bb       	out	0x18, r24	; 24
 4ee:	2e c0       	rjmp	.+92     	; 0x54c <DIO_WRITE_PIN+0xbe>
 4f0:	98 b3       	in	r25, 0x18	; 24
 4f2:	80 95       	com	r24
 4f4:	89 23       	and	r24, r25
 4f6:	88 bb       	out	0x18, r24	; 24
 4f8:	29 c0       	rjmp	.+82     	; 0x54c <DIO_WRITE_PIN+0xbe>
 4fa:	24 b3       	in	r18, 0x14	; 20
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	02 c0       	rjmp	.+4      	; 0x506 <DIO_WRITE_PIN+0x78>
 502:	88 0f       	add	r24, r24
 504:	99 1f       	adc	r25, r25
 506:	6a 95       	dec	r22
 508:	e2 f7       	brpl	.-8      	; 0x502 <DIO_WRITE_PIN+0x74>
 50a:	28 2b       	or	r18, r24
 50c:	24 bb       	out	0x14, r18	; 20
 50e:	44 23       	and	r20, r20
 510:	21 f0       	breq	.+8      	; 0x51a <DIO_WRITE_PIN+0x8c>
 512:	95 b3       	in	r25, 0x15	; 21
 514:	89 2b       	or	r24, r25
 516:	85 bb       	out	0x15, r24	; 21
 518:	19 c0       	rjmp	.+50     	; 0x54c <DIO_WRITE_PIN+0xbe>
 51a:	95 b3       	in	r25, 0x15	; 21
 51c:	80 95       	com	r24
 51e:	89 23       	and	r24, r25
 520:	85 bb       	out	0x15, r24	; 21
 522:	14 c0       	rjmp	.+40     	; 0x54c <DIO_WRITE_PIN+0xbe>
 524:	21 b3       	in	r18, 0x11	; 17
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	02 c0       	rjmp	.+4      	; 0x530 <DIO_WRITE_PIN+0xa2>
 52c:	88 0f       	add	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	6a 95       	dec	r22
 532:	e2 f7       	brpl	.-8      	; 0x52c <DIO_WRITE_PIN+0x9e>
 534:	28 2b       	or	r18, r24
 536:	21 bb       	out	0x11, r18	; 17
 538:	44 23       	and	r20, r20
 53a:	21 f0       	breq	.+8      	; 0x544 <DIO_WRITE_PIN+0xb6>
 53c:	92 b3       	in	r25, 0x12	; 18
 53e:	89 2b       	or	r24, r25
 540:	82 bb       	out	0x12, r24	; 18
 542:	04 c0       	rjmp	.+8      	; 0x54c <DIO_WRITE_PIN+0xbe>
 544:	92 b3       	in	r25, 0x12	; 18
 546:	80 95       	com	r24
 548:	89 23       	and	r24, r25
 54a:	82 bb       	out	0x12, r24	; 18
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	08 95       	ret

00000550 <DIO_SET_PORTDIRECTION>:

                           /*********************************************************************/
                                   /* Configuring PORTx either as INPUT or OUTPUT */
                           /*********************************************************************/
DIO_STATE_t DIO_SET_PORTDIRECTION(uint8_t port, uint8_t direction){
	switch(port){
 550:	82 30       	cpi	r24, 0x02	; 2
 552:	81 f0       	breq	.+32     	; 0x574 <DIO_SET_PORTDIRECTION+0x24>
 554:	18 f4       	brcc	.+6      	; 0x55c <DIO_SET_PORTDIRECTION+0xc>
 556:	81 30       	cpi	r24, 0x01	; 1
 558:	31 f0       	breq	.+12     	; 0x566 <DIO_SET_PORTDIRECTION+0x16>
 55a:	20 c0       	rjmp	.+64     	; 0x59c <DIO_SET_PORTDIRECTION+0x4c>
 55c:	83 30       	cpi	r24, 0x03	; 3
 55e:	89 f0       	breq	.+34     	; 0x582 <DIO_SET_PORTDIRECTION+0x32>
 560:	84 30       	cpi	r24, 0x04	; 4
 562:	b1 f0       	breq	.+44     	; 0x590 <DIO_SET_PORTDIRECTION+0x40>
 564:	1b c0       	rjmp	.+54     	; 0x59c <DIO_SET_PORTDIRECTION+0x4c>
	          case A:{
	        	  DDRA = (direction==OUTPUT) ? 0xFF : 0x00; // Configure PORT A as Output or Input according to condition
 566:	61 30       	cpi	r22, 0x01	; 1
 568:	11 f4       	brne	.+4      	; 0x56e <DIO_SET_PORTDIRECTION+0x1e>
 56a:	8f ef       	ldi	r24, 0xFF	; 255
 56c:	01 c0       	rjmp	.+2      	; 0x570 <DIO_SET_PORTDIRECTION+0x20>
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	8a bb       	out	0x1a, r24	; 26
	        	  break;
 572:	14 c0       	rjmp	.+40     	; 0x59c <DIO_SET_PORTDIRECTION+0x4c>
	                }
	          case B:{
                  DDRB = (direction==OUTPUT) ? 0xFF : 0x00;// Configure PORT A as Output or Input according to condition
 574:	61 30       	cpi	r22, 0x01	; 1
 576:	11 f4       	brne	.+4      	; 0x57c <DIO_SET_PORTDIRECTION+0x2c>
 578:	8f ef       	ldi	r24, 0xFF	; 255
 57a:	01 c0       	rjmp	.+2      	; 0x57e <DIO_SET_PORTDIRECTION+0x2e>
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	87 bb       	out	0x17, r24	; 23
	        	  break;
 580:	0d c0       	rjmp	.+26     	; 0x59c <DIO_SET_PORTDIRECTION+0x4c>
	                   }
	          case C:{
                  DDRC = (direction==OUTPUT) ? 0xFF : 0x00;// Configure PORT A as Output or Input according to condition
 582:	61 30       	cpi	r22, 0x01	; 1
 584:	11 f4       	brne	.+4      	; 0x58a <DIO_SET_PORTDIRECTION+0x3a>
 586:	8f ef       	ldi	r24, 0xFF	; 255
 588:	01 c0       	rjmp	.+2      	; 0x58c <DIO_SET_PORTDIRECTION+0x3c>
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	84 bb       	out	0x14, r24	; 20
	        	  break;
 58e:	06 c0       	rjmp	.+12     	; 0x59c <DIO_SET_PORTDIRECTION+0x4c>
	                    }
	          case D:{
	        	  DDRD = (direction==OUTPUT) ? 0xFF : 0x00;// Configure PORT A as Output or Input according to condition
 590:	61 30       	cpi	r22, 0x01	; 1
 592:	11 f4       	brne	.+4      	; 0x598 <DIO_SET_PORTDIRECTION+0x48>
 594:	8f ef       	ldi	r24, 0xFF	; 255
 596:	01 c0       	rjmp	.+2      	; 0x59a <DIO_SET_PORTDIRECTION+0x4a>
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	81 bb       	out	0x11, r24	; 17
	                break;
	                  }
	                }
					
					return DIO_SUCCESS;
                 }
 59c:	80 e0       	ldi	r24, 0x00	; 0
 59e:	08 95       	ret

000005a0 <__vector_1>:
#include <util/delay.h>


static uint8_t EXT_Flag = 0 , status = 0;

ISR(INT0_vect){
 5a0:	1f 92       	push	r1
 5a2:	0f 92       	push	r0
 5a4:	0f b6       	in	r0, 0x3f	; 63
 5a6:	0f 92       	push	r0
 5a8:	11 24       	eor	r1, r1
 5aa:	8f 93       	push	r24
	
	EXT_Flag = 1;	
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <EXT_Flag>
}
 5b2:	8f 91       	pop	r24
 5b4:	0f 90       	pop	r0
 5b6:	0f be       	out	0x3f, r0	; 63
 5b8:	0f 90       	pop	r0
 5ba:	1f 90       	pop	r1
 5bc:	18 95       	reti

000005be <ExtINT_Init>:


/**********************************************************/
           /* External Interrupt Initialization */
/**********************************************************/
void ExtINT_Init(uint8_t INT_PIN , uint8_t TYPE){
 5be:	cf 93       	push	r28
 5c0:	c6 2f       	mov	r28, r22
	
	
	switch (INT_PIN){
 5c2:	81 30       	cpi	r24, 0x01	; 1
 5c4:	91 f0       	breq	.+36     	; 0x5ea <ExtINT_Init+0x2c>
 5c6:	18 f0       	brcs	.+6      	; 0x5ce <ExtINT_Init+0x10>
 5c8:	82 30       	cpi	r24, 0x02	; 2
 5ca:	09 f1       	breq	.+66     	; 0x60e <ExtINT_Init+0x50>
 5cc:	2b c0       	rjmp	.+86     	; 0x624 <ExtINT_Init+0x66>
		// External Interrupt PIN 0
		case 0: {
			DIO_SET_PINDIRECTION(D, 2, INPUT); //Activate input state for pin
 5ce:	40 e0       	ldi	r20, 0x00	; 0
 5d0:	62 e0       	ldi	r22, 0x02	; 2
 5d2:	84 e0       	ldi	r24, 0x04	; 4
 5d4:	0e 94 d6 01 	call	0x3ac	; 0x3ac <DIO_SET_PINDIRECTION>
			if(TYPE == LEVEL){
 5d8:	c1 30       	cpi	r28, 0x01	; 1
 5da:	19 f0       	breq	.+6      	; 0x5e2 <ExtINT_Init+0x24>
					
				//SET_BIT(MCUCR , ISC00); // Any change in logical level generates an interrupt
			}
			else{
				//SET_BIT(MCUCR , ISC00); // Falling edge generates an interrupt
				SET_BIT(MCUCR , ISC01);	
 5dc:	85 b7       	in	r24, 0x35	; 53
 5de:	82 60       	ori	r24, 0x02	; 2
 5e0:	85 bf       	out	0x35, r24	; 53
				}
			SET_BIT(GICR , INT0); // Enable INT0 Interrupt	
 5e2:	8b b7       	in	r24, 0x3b	; 59
 5e4:	80 64       	ori	r24, 0x40	; 64
 5e6:	8b bf       	out	0x3b, r24	; 59
			
		    break;	
 5e8:	1d c0       	rjmp	.+58     	; 0x624 <ExtINT_Init+0x66>
		}
		
		// External Interrupt PIN 1
	    case 1: {
			DIO_SET_PINDIRECTION(D, 3, INPUT); //Activate input state for pin
 5ea:	40 e0       	ldi	r20, 0x00	; 0
 5ec:	63 e0       	ldi	r22, 0x03	; 3
 5ee:	84 e0       	ldi	r24, 0x04	; 4
 5f0:	0e 94 d6 01 	call	0x3ac	; 0x3ac <DIO_SET_PINDIRECTION>
			if(TYPE == LEVEL){ // Level triggered interrupt
 5f4:	c1 30       	cpi	r28, 0x01	; 1
 5f6:	21 f4       	brne	.+8      	; 0x600 <ExtINT_Init+0x42>
				SET_BIT(MCUCR , ISC10); // Any change in logical level generates an interrupt
 5f8:	85 b7       	in	r24, 0x35	; 53
 5fa:	84 60       	ori	r24, 0x04	; 4
 5fc:	85 bf       	out	0x35, r24	; 53
 5fe:	03 c0       	rjmp	.+6      	; 0x606 <ExtINT_Init+0x48>
			}
			else{ // falling edge triggered interrupt
				SET_BIT(MCUCR , ISC11); // Falling edge generates an interrupt
 600:	85 b7       	in	r24, 0x35	; 53
 602:	88 60       	ori	r24, 0x08	; 8
 604:	85 bf       	out	0x35, r24	; 53
			}
			SET_BIT(GICR , INT1); // Enable INT0 Interrupt
 606:	8b b7       	in	r24, 0x3b	; 59
 608:	80 68       	ori	r24, 0x80	; 128
 60a:	8b bf       	out	0x3b, r24	; 59
			break;
 60c:	0b c0       	rjmp	.+22     	; 0x624 <ExtINT_Init+0x66>
		}
		
		// External Interrupt PIN 2
		case 2: {
			DIO_SET_PINDIRECTION(B, 2, INPUT); //Activate input state for pin
 60e:	40 e0       	ldi	r20, 0x00	; 0
 610:	62 e0       	ldi	r22, 0x02	; 2
 612:	82 e0       	ldi	r24, 0x02	; 2
 614:	0e 94 d6 01 	call	0x3ac	; 0x3ac <DIO_SET_PINDIRECTION>
			SET_BIT(MCUCSR , ISC2); // PIN 2 is only edge triggered
 618:	84 b7       	in	r24, 0x34	; 52
 61a:	80 64       	ori	r24, 0x40	; 64
 61c:	84 bf       	out	0x34, r24	; 52
			SET_BIT(GICR , INT2); // Enable INT0 Interrupt
 61e:	8b b7       	in	r24, 0x3b	; 59
 620:	80 62       	ori	r24, 0x20	; 32
 622:	8b bf       	out	0x3b, r24	; 59
			break;
		}
	}
	
	SET_BIT(SREG , 7); //Enabling global interrupt
 624:	8f b7       	in	r24, 0x3f	; 63
 626:	80 68       	ori	r24, 0x80	; 128
 628:	8f bf       	out	0x3f, r24	; 63
}
 62a:	cf 91       	pop	r28
 62c:	08 95       	ret

0000062e <ExtINT_ENABLE>:

/*******************************************************/
            /* Enable the interrupt */
/*******************************************************/
void ExtINT_ENABLE(uint8_t INT_PIN){
	switch(INT_PIN){
 62e:	81 30       	cpi	r24, 0x01	; 1
 630:	41 f0       	breq	.+16     	; 0x642 <ExtINT_ENABLE+0x14>
 632:	18 f0       	brcs	.+6      	; 0x63a <ExtINT_ENABLE+0xc>
 634:	82 30       	cpi	r24, 0x02	; 2
 636:	49 f0       	breq	.+18     	; 0x64a <ExtINT_ENABLE+0x1c>
 638:	08 95       	ret
		case 0:{
			SET_BIT(GICR , INT0);
 63a:	8b b7       	in	r24, 0x3b	; 59
 63c:	80 64       	ori	r24, 0x40	; 64
 63e:	8b bf       	out	0x3b, r24	; 59
			break;
 640:	08 95       	ret
		}
		case 1:{
			SET_BIT(GICR , INT0);
 642:	8b b7       	in	r24, 0x3b	; 59
 644:	80 64       	ori	r24, 0x40	; 64
 646:	8b bf       	out	0x3b, r24	; 59
			break;
 648:	08 95       	ret
		}
		case 2:{
			SET_BIT(GICR , INT0);
 64a:	8b b7       	in	r24, 0x3b	; 59
 64c:	80 64       	ori	r24, 0x40	; 64
 64e:	8b bf       	out	0x3b, r24	; 59
 650:	08 95       	ret

00000652 <ExtINT_DISABLE>:

/*******************************************************/
               /* Disable the interrupt */
/*******************************************************/
void ExtINT_DISABLE(uint8_t INT_PIN){
	switch(INT_PIN){
 652:	81 30       	cpi	r24, 0x01	; 1
 654:	41 f0       	breq	.+16     	; 0x666 <ExtINT_DISABLE+0x14>
 656:	18 f0       	brcs	.+6      	; 0x65e <ExtINT_DISABLE+0xc>
 658:	82 30       	cpi	r24, 0x02	; 2
 65a:	49 f0       	breq	.+18     	; 0x66e <ExtINT_DISABLE+0x1c>
 65c:	08 95       	ret
		case 0:{
			CLR_BIT(GICR , INT0);
 65e:	8b b7       	in	r24, 0x3b	; 59
 660:	8f 7b       	andi	r24, 0xBF	; 191
 662:	8b bf       	out	0x3b, r24	; 59
			break;
 664:	08 95       	ret
		}
		case 1:{
			CLR_BIT(GICR , INT0);
 666:	8b b7       	in	r24, 0x3b	; 59
 668:	8f 7b       	andi	r24, 0xBF	; 191
 66a:	8b bf       	out	0x3b, r24	; 59
			break;
 66c:	08 95       	ret
		}
		case 2:{
			CLR_BIT(GICR , INT0);
 66e:	8b b7       	in	r24, 0x3b	; 59
 670:	8f 7b       	andi	r24, 0xBF	; 191
 672:	8b bf       	out	0x3b, r24	; 59
 674:	08 95       	ret

00000676 <GET_EXTINT_STATUS>:
              /* Get status of interrupt flag*/
/***********************************************************/
uint8_t GET_EXTINT_STATUS(void){
	
	
	if(EXT_Flag > 0){
 676:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <EXT_Flag>
 67a:	88 23       	and	r24, r24
 67c:	29 f0       	breq	.+10     	; 0x688 <GET_EXTINT_STATUS+0x12>
			
		status = 1;
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		EXT_Flag = 0;
 684:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <EXT_Flag>
	}                         
	
	
	return status;
}
 688:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 68c:	08 95       	ret

0000068e <CLEAR_EXTINT_STATUS>:

/******************************************************************************/
    /* Clearing Status of External Interrupt to start a new interrupt case */
/******************************************************************************/
void CLEAR_EXTINT_STATUS(void){
	status = 0;
 68e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 692:	08 95       	ret

00000694 <__vector_11>:
ISR (TIMER0_COMP_vect){

   }                        */


ISR (TIMER0_OVF_vect){
 694:	1f 92       	push	r1
 696:	0f 92       	push	r0
 698:	0f b6       	in	r0, 0x3f	; 63
 69a:	0f 92       	push	r0
 69c:	11 24       	eor	r1, r1
 69e:	8f 93       	push	r24
	OVF_flag = 1;
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <OVF_flag>
}                   
 6a6:	8f 91       	pop	r24
 6a8:	0f 90       	pop	r0
 6aa:	0f be       	out	0x3f, r0	; 63
 6ac:	0f 90       	pop	r0
 6ae:	1f 90       	pop	r1
 6b0:	18 95       	reti

000006b2 <TIMER0_DELAY>:
TIMER_STATE_t TIMER0_DELAY(uint16_t TIME_MS){
	uint16_t count;
	f32_t ct ;
	f32_t overflow_cyc;
	
	if(TIME_MS <= 2){
 6b2:	83 30       	cpi	r24, 0x03	; 3
 6b4:	91 05       	cpc	r25, r1
 6b6:	70 f5       	brcc	.+92     	; 0x714 <TIMER0_DELAY+0x62>
		TCCR0 = (1<<CS01);
 6b8:	22 e0       	ldi	r18, 0x02	; 2
 6ba:	23 bf       	out	0x33, r18	; 51
		ct = (TIME_MS * 1000) / 8;
 6bc:	48 ee       	ldi	r20, 0xE8	; 232
 6be:	53 e0       	ldi	r21, 0x03	; 3
 6c0:	84 9f       	mul	r24, r20
 6c2:	90 01       	movw	r18, r0
 6c4:	85 9f       	mul	r24, r21
 6c6:	30 0d       	add	r19, r0
 6c8:	94 9f       	mul	r25, r20
 6ca:	30 0d       	add	r19, r0
 6cc:	11 24       	eor	r1, r1
 6ce:	c9 01       	movw	r24, r18
 6d0:	96 95       	lsr	r25
 6d2:	87 95       	ror	r24
 6d4:	96 95       	lsr	r25
 6d6:	87 95       	ror	r24
 6d8:	96 95       	lsr	r25
 6da:	87 95       	ror	r24
		OCR0 = ct;
 6dc:	8c bf       	out	0x3c, r24	; 60
		SET_BIT(SREG , 7);
 6de:	8f b7       	in	r24, 0x3f	; 63
 6e0:	80 68       	ori	r24, 0x80	; 128
 6e2:	8f bf       	out	0x3f, r24	; 63
		SET_BIT(TIMSK , OCIE0);
 6e4:	89 b7       	in	r24, 0x39	; 57
 6e6:	82 60       	ori	r24, 0x02	; 2
 6e8:	89 bf       	out	0x39, r24	; 57
		while((TIFR &= 2) == 0);
 6ea:	88 b7       	in	r24, 0x38	; 56
 6ec:	82 70       	andi	r24, 0x02	; 2
 6ee:	88 bf       	out	0x38, r24	; 56
 6f0:	88 23       	and	r24, r24
 6f2:	d9 f3       	breq	.-10     	; 0x6ea <TIMER0_DELAY+0x38>
		CLR_BIT(TIFR , 1);
 6f4:	88 b7       	in	r24, 0x38	; 56
 6f6:	8d 7f       	andi	r24, 0xFD	; 253
 6f8:	88 bf       	out	0x38, r24	; 56
		CLR_BIT(TIMSK , OCIE0);
 6fa:	89 b7       	in	r24, 0x39	; 57
 6fc:	8d 7f       	andi	r24, 0xFD	; 253
 6fe:	89 bf       	out	0x39, r24	; 57
		//Stop the timer
		CLR_BIT(TCCR0 , CS00);
 700:	83 b7       	in	r24, 0x33	; 51
 702:	8e 7f       	andi	r24, 0xFE	; 254
 704:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0 , CS01);
 706:	83 b7       	in	r24, 0x33	; 51
 708:	8d 7f       	andi	r24, 0xFD	; 253
 70a:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0 , CS02);
 70c:	83 b7       	in	r24, 0x33	; 51
 70e:	8b 7f       	andi	r24, 0xFB	; 251
 710:	83 bf       	out	0x33, r24	; 51
 712:	9e c0       	rjmp	.+316    	; 0x850 <__DATA_REGION_LENGTH__+0x50>
	}
	else if(TIME_MS > 2 && TIME_MS <= 16){
 714:	9c 01       	movw	r18, r24
 716:	23 50       	subi	r18, 0x03	; 3
 718:	31 09       	sbc	r19, r1
 71a:	2e 30       	cpi	r18, 0x0E	; 14
 71c:	31 05       	cpc	r19, r1
 71e:	88 f5       	brcc	.+98     	; 0x782 <TIMER0_DELAY+0xd0>
		TCCR0 = (1<<CS01) | (1<<CS00);
 720:	23 e0       	ldi	r18, 0x03	; 3
 722:	23 bf       	out	0x33, r18	; 51
		ct = (TIME_MS * 1000) / 64;
 724:	48 ee       	ldi	r20, 0xE8	; 232
 726:	53 e0       	ldi	r21, 0x03	; 3
 728:	84 9f       	mul	r24, r20
 72a:	90 01       	movw	r18, r0
 72c:	85 9f       	mul	r24, r21
 72e:	30 0d       	add	r19, r0
 730:	94 9f       	mul	r25, r20
 732:	30 0d       	add	r19, r0
 734:	11 24       	eor	r1, r1
 736:	c9 01       	movw	r24, r18
 738:	00 24       	eor	r0, r0
 73a:	88 0f       	add	r24, r24
 73c:	99 1f       	adc	r25, r25
 73e:	00 1c       	adc	r0, r0
 740:	88 0f       	add	r24, r24
 742:	99 1f       	adc	r25, r25
 744:	00 1c       	adc	r0, r0
 746:	89 2f       	mov	r24, r25
 748:	90 2d       	mov	r25, r0
		OCR0 = ct;
 74a:	8c bf       	out	0x3c, r24	; 60
		SET_BIT(SREG , 7);
 74c:	8f b7       	in	r24, 0x3f	; 63
 74e:	80 68       	ori	r24, 0x80	; 128
 750:	8f bf       	out	0x3f, r24	; 63
		SET_BIT(TIMSK , OCIE0);
 752:	89 b7       	in	r24, 0x39	; 57
 754:	82 60       	ori	r24, 0x02	; 2
 756:	89 bf       	out	0x39, r24	; 57
		while((TIFR &= 2) == 0);
 758:	88 b7       	in	r24, 0x38	; 56
 75a:	82 70       	andi	r24, 0x02	; 2
 75c:	88 bf       	out	0x38, r24	; 56
 75e:	88 23       	and	r24, r24
 760:	d9 f3       	breq	.-10     	; 0x758 <TIMER0_DELAY+0xa6>
		CLR_BIT(TIFR , 1);
 762:	88 b7       	in	r24, 0x38	; 56
 764:	8d 7f       	andi	r24, 0xFD	; 253
 766:	88 bf       	out	0x38, r24	; 56
		CLR_BIT(TIMSK , OCIE0);
 768:	89 b7       	in	r24, 0x39	; 57
 76a:	8d 7f       	andi	r24, 0xFD	; 253
 76c:	89 bf       	out	0x39, r24	; 57
		//Stop the timer
		CLR_BIT(TCCR0 , CS00);
 76e:	83 b7       	in	r24, 0x33	; 51
 770:	8e 7f       	andi	r24, 0xFE	; 254
 772:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0 , CS01);
 774:	83 b7       	in	r24, 0x33	; 51
 776:	8d 7f       	andi	r24, 0xFD	; 253
 778:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0 , CS02);
 77a:	83 b7       	in	r24, 0x33	; 51
 77c:	8b 7f       	andi	r24, 0xFB	; 251
 77e:	83 bf       	out	0x33, r24	; 51
 780:	67 c0       	rjmp	.+206    	; 0x850 <__DATA_REGION_LENGTH__+0x50>
	}
	
	else if(TIME_MS > 16 && TIME_MS <= 65){
 782:	9c 01       	movw	r18, r24
 784:	21 51       	subi	r18, 0x11	; 17
 786:	31 09       	sbc	r19, r1
 788:	21 33       	cpi	r18, 0x31	; 49
 78a:	31 05       	cpc	r19, r1
 78c:	38 f5       	brcc	.+78     	; 0x7dc <TIMER0_DELAY+0x12a>
		TCCR0 = (1<<CS02);
 78e:	24 e0       	ldi	r18, 0x04	; 4
 790:	23 bf       	out	0x33, r18	; 51
		ct = (TIME_MS * 1000) / 256;
 792:	48 ee       	ldi	r20, 0xE8	; 232
 794:	53 e0       	ldi	r21, 0x03	; 3
 796:	84 9f       	mul	r24, r20
 798:	90 01       	movw	r18, r0
 79a:	85 9f       	mul	r24, r21
 79c:	30 0d       	add	r19, r0
 79e:	94 9f       	mul	r25, r20
 7a0:	30 0d       	add	r19, r0
 7a2:	11 24       	eor	r1, r1
		OCR0 = ct;
 7a4:	3c bf       	out	0x3c, r19	; 60
		SET_BIT(SREG , 7);
 7a6:	8f b7       	in	r24, 0x3f	; 63
 7a8:	80 68       	ori	r24, 0x80	; 128
 7aa:	8f bf       	out	0x3f, r24	; 63
		SET_BIT(TIMSK , OCIE0);
 7ac:	89 b7       	in	r24, 0x39	; 57
 7ae:	82 60       	ori	r24, 0x02	; 2
 7b0:	89 bf       	out	0x39, r24	; 57
		while((TIFR &= 2) == 0);
 7b2:	88 b7       	in	r24, 0x38	; 56
 7b4:	82 70       	andi	r24, 0x02	; 2
 7b6:	88 bf       	out	0x38, r24	; 56
 7b8:	88 23       	and	r24, r24
 7ba:	d9 f3       	breq	.-10     	; 0x7b2 <TIMER0_DELAY+0x100>
		CLR_BIT(TIFR , 1);
 7bc:	88 b7       	in	r24, 0x38	; 56
 7be:	8d 7f       	andi	r24, 0xFD	; 253
 7c0:	88 bf       	out	0x38, r24	; 56
		CLR_BIT(TIMSK , OCIE0);
 7c2:	89 b7       	in	r24, 0x39	; 57
 7c4:	8d 7f       	andi	r24, 0xFD	; 253
 7c6:	89 bf       	out	0x39, r24	; 57
		//Stop the timer
		CLR_BIT(TCCR0 , CS00);
 7c8:	83 b7       	in	r24, 0x33	; 51
 7ca:	8e 7f       	andi	r24, 0xFE	; 254
 7cc:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0 , CS01);
 7ce:	83 b7       	in	r24, 0x33	; 51
 7d0:	8d 7f       	andi	r24, 0xFD	; 253
 7d2:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0 , CS02);
 7d4:	83 b7       	in	r24, 0x33	; 51
 7d6:	8b 7f       	andi	r24, 0xFB	; 251
 7d8:	83 bf       	out	0x33, r24	; 51
 7da:	3a c0       	rjmp	.+116    	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 7dc:	bc 01       	movw	r22, r24
		
	}
	else{
		//TCCR0 = (1<<CS00) | (1<<CS02);
		SET_BIT(TCCR0 , CS00);
 7de:	83 b7       	in	r24, 0x33	; 51
 7e0:	81 60       	ori	r24, 0x01	; 1
 7e2:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0 , CS02);
 7e4:	83 b7       	in	r24, 0x33	; 51
 7e6:	84 60       	ori	r24, 0x04	; 4
 7e8:	83 bf       	out	0x33, r24	; 51
		//Use the global variable count to count number of overflow cycles
		ct = (TIME_MS * 1000.0) / 1024.0;
 7ea:	80 e0       	ldi	r24, 0x00	; 0
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__floatunsisf>
 7f2:	20 e0       	ldi	r18, 0x00	; 0
 7f4:	30 e0       	ldi	r19, 0x00	; 0
 7f6:	4a e7       	ldi	r20, 0x7A	; 122
 7f8:	54 e4       	ldi	r21, 0x44	; 68
 7fa:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__mulsf3>
 7fe:	20 e0       	ldi	r18, 0x00	; 0
 800:	30 e0       	ldi	r19, 0x00	; 0
 802:	40 e8       	ldi	r20, 0x80	; 128
 804:	5a e3       	ldi	r21, 0x3A	; 58
 806:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__mulsf3>
		overflow_cyc = ct / 256.0;
 80a:	20 e0       	ldi	r18, 0x00	; 0
 80c:	30 e0       	ldi	r19, 0x00	; 0
 80e:	40 e8       	ldi	r20, 0x80	; 128
 810:	5b e3       	ldi	r21, 0x3B	; 59
 812:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__mulsf3>
		count = (uint16_t) overflow_cyc;
 816:	0e 94 2a 04 	call	0x854	; 0x854 <__fixunssfsi>
		SET_BIT(SREG , 7);
 81a:	8f b7       	in	r24, 0x3f	; 63
 81c:	80 68       	ori	r24, 0x80	; 128
 81e:	8f bf       	out	0x3f, r24	; 63
		SET_BIT(TIMSK , TOIE0);
 820:	89 b7       	in	r24, 0x39	; 57
 822:	81 60       	ori	r24, 0x01	; 1
 824:	89 bf       	out	0x39, r24	; 57
		
		while(count > 0){
 826:	08 c0       	rjmp	.+16     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
			//SET_BIT(SREG , 7);
			//SET_BIT(TIMSK , TOIE0);
			
			//OCR0 = 255;
			while(OVF_flag == 0);
 828:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <OVF_flag>
 82c:	88 23       	and	r24, r24
 82e:	e1 f3       	breq	.-8      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
			OVF_flag = 0;
 830:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <OVF_flag>
			count--;
 834:	61 50       	subi	r22, 0x01	; 1
 836:	71 09       	sbc	r23, r1
		overflow_cyc = ct / 256.0;
		count = (uint16_t) overflow_cyc;
		SET_BIT(SREG , 7);
		SET_BIT(TIMSK , TOIE0);
		
		while(count > 0){
 838:	61 15       	cp	r22, r1
 83a:	71 05       	cpc	r23, r1
 83c:	a9 f7       	brne	.-22     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
			OVF_flag = 0;
			count--;
		}
		//CLR_BIT(SREG , 7);
		//Stop the timer
		CLR_BIT(TCCR0 , CS00);
 83e:	83 b7       	in	r24, 0x33	; 51
 840:	8e 7f       	andi	r24, 0xFE	; 254
 842:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0 , CS01);
 844:	83 b7       	in	r24, 0x33	; 51
 846:	8d 7f       	andi	r24, 0xFD	; 253
 848:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0 , CS02);
 84a:	83 b7       	in	r24, 0x33	; 51
 84c:	8b 7f       	andi	r24, 0xFB	; 251
 84e:	83 bf       	out	0x33, r24	; 51
	}
	
	
	return TIMER_SUCCESS;
}
 850:	80 e0       	ldi	r24, 0x00	; 0
 852:	08 95       	ret

00000854 <__fixunssfsi>:
 854:	0e 94 c6 04 	call	0x98c	; 0x98c <__fp_splitA>
 858:	88 f0       	brcs	.+34     	; 0x87c <__stack+0x1d>
 85a:	9f 57       	subi	r25, 0x7F	; 127
 85c:	98 f0       	brcs	.+38     	; 0x884 <__stack+0x25>
 85e:	b9 2f       	mov	r27, r25
 860:	99 27       	eor	r25, r25
 862:	b7 51       	subi	r27, 0x17	; 23
 864:	b0 f0       	brcs	.+44     	; 0x892 <__stack+0x33>
 866:	e1 f0       	breq	.+56     	; 0x8a0 <__stack+0x41>
 868:	66 0f       	add	r22, r22
 86a:	77 1f       	adc	r23, r23
 86c:	88 1f       	adc	r24, r24
 86e:	99 1f       	adc	r25, r25
 870:	1a f0       	brmi	.+6      	; 0x878 <__stack+0x19>
 872:	ba 95       	dec	r27
 874:	c9 f7       	brne	.-14     	; 0x868 <__stack+0x9>
 876:	14 c0       	rjmp	.+40     	; 0x8a0 <__stack+0x41>
 878:	b1 30       	cpi	r27, 0x01	; 1
 87a:	91 f0       	breq	.+36     	; 0x8a0 <__stack+0x41>
 87c:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__fp_zero>
 880:	b1 e0       	ldi	r27, 0x01	; 1
 882:	08 95       	ret
 884:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__fp_zero>
 888:	67 2f       	mov	r22, r23
 88a:	78 2f       	mov	r23, r24
 88c:	88 27       	eor	r24, r24
 88e:	b8 5f       	subi	r27, 0xF8	; 248
 890:	39 f0       	breq	.+14     	; 0x8a0 <__stack+0x41>
 892:	b9 3f       	cpi	r27, 0xF9	; 249
 894:	cc f3       	brlt	.-14     	; 0x888 <__stack+0x29>
 896:	86 95       	lsr	r24
 898:	77 95       	ror	r23
 89a:	67 95       	ror	r22
 89c:	b3 95       	inc	r27
 89e:	d9 f7       	brne	.-10     	; 0x896 <__stack+0x37>
 8a0:	3e f4       	brtc	.+14     	; 0x8b0 <__stack+0x51>
 8a2:	90 95       	com	r25
 8a4:	80 95       	com	r24
 8a6:	70 95       	com	r23
 8a8:	61 95       	neg	r22
 8aa:	7f 4f       	sbci	r23, 0xFF	; 255
 8ac:	8f 4f       	sbci	r24, 0xFF	; 255
 8ae:	9f 4f       	sbci	r25, 0xFF	; 255
 8b0:	08 95       	ret

000008b2 <__floatunsisf>:
 8b2:	e8 94       	clt
 8b4:	09 c0       	rjmp	.+18     	; 0x8c8 <__floatsisf+0x12>

000008b6 <__floatsisf>:
 8b6:	97 fb       	bst	r25, 7
 8b8:	3e f4       	brtc	.+14     	; 0x8c8 <__floatsisf+0x12>
 8ba:	90 95       	com	r25
 8bc:	80 95       	com	r24
 8be:	70 95       	com	r23
 8c0:	61 95       	neg	r22
 8c2:	7f 4f       	sbci	r23, 0xFF	; 255
 8c4:	8f 4f       	sbci	r24, 0xFF	; 255
 8c6:	9f 4f       	sbci	r25, 0xFF	; 255
 8c8:	99 23       	and	r25, r25
 8ca:	a9 f0       	breq	.+42     	; 0x8f6 <__floatsisf+0x40>
 8cc:	f9 2f       	mov	r31, r25
 8ce:	96 e9       	ldi	r25, 0x96	; 150
 8d0:	bb 27       	eor	r27, r27
 8d2:	93 95       	inc	r25
 8d4:	f6 95       	lsr	r31
 8d6:	87 95       	ror	r24
 8d8:	77 95       	ror	r23
 8da:	67 95       	ror	r22
 8dc:	b7 95       	ror	r27
 8de:	f1 11       	cpse	r31, r1
 8e0:	f8 cf       	rjmp	.-16     	; 0x8d2 <__floatsisf+0x1c>
 8e2:	fa f4       	brpl	.+62     	; 0x922 <__floatsisf+0x6c>
 8e4:	bb 0f       	add	r27, r27
 8e6:	11 f4       	brne	.+4      	; 0x8ec <__floatsisf+0x36>
 8e8:	60 ff       	sbrs	r22, 0
 8ea:	1b c0       	rjmp	.+54     	; 0x922 <__floatsisf+0x6c>
 8ec:	6f 5f       	subi	r22, 0xFF	; 255
 8ee:	7f 4f       	sbci	r23, 0xFF	; 255
 8f0:	8f 4f       	sbci	r24, 0xFF	; 255
 8f2:	9f 4f       	sbci	r25, 0xFF	; 255
 8f4:	16 c0       	rjmp	.+44     	; 0x922 <__floatsisf+0x6c>
 8f6:	88 23       	and	r24, r24
 8f8:	11 f0       	breq	.+4      	; 0x8fe <__floatsisf+0x48>
 8fa:	96 e9       	ldi	r25, 0x96	; 150
 8fc:	11 c0       	rjmp	.+34     	; 0x920 <__floatsisf+0x6a>
 8fe:	77 23       	and	r23, r23
 900:	21 f0       	breq	.+8      	; 0x90a <__floatsisf+0x54>
 902:	9e e8       	ldi	r25, 0x8E	; 142
 904:	87 2f       	mov	r24, r23
 906:	76 2f       	mov	r23, r22
 908:	05 c0       	rjmp	.+10     	; 0x914 <__floatsisf+0x5e>
 90a:	66 23       	and	r22, r22
 90c:	71 f0       	breq	.+28     	; 0x92a <__floatsisf+0x74>
 90e:	96 e8       	ldi	r25, 0x86	; 134
 910:	86 2f       	mov	r24, r22
 912:	70 e0       	ldi	r23, 0x00	; 0
 914:	60 e0       	ldi	r22, 0x00	; 0
 916:	2a f0       	brmi	.+10     	; 0x922 <__floatsisf+0x6c>
 918:	9a 95       	dec	r25
 91a:	66 0f       	add	r22, r22
 91c:	77 1f       	adc	r23, r23
 91e:	88 1f       	adc	r24, r24
 920:	da f7       	brpl	.-10     	; 0x918 <__floatsisf+0x62>
 922:	88 0f       	add	r24, r24
 924:	96 95       	lsr	r25
 926:	87 95       	ror	r24
 928:	97 f9       	bld	r25, 7
 92a:	08 95       	ret

0000092c <__fp_inf>:
 92c:	97 f9       	bld	r25, 7
 92e:	9f 67       	ori	r25, 0x7F	; 127
 930:	80 e8       	ldi	r24, 0x80	; 128
 932:	70 e0       	ldi	r23, 0x00	; 0
 934:	60 e0       	ldi	r22, 0x00	; 0
 936:	08 95       	ret

00000938 <__fp_nan>:
 938:	9f ef       	ldi	r25, 0xFF	; 255
 93a:	80 ec       	ldi	r24, 0xC0	; 192
 93c:	08 95       	ret

0000093e <__fp_pscA>:
 93e:	00 24       	eor	r0, r0
 940:	0a 94       	dec	r0
 942:	16 16       	cp	r1, r22
 944:	17 06       	cpc	r1, r23
 946:	18 06       	cpc	r1, r24
 948:	09 06       	cpc	r0, r25
 94a:	08 95       	ret

0000094c <__fp_pscB>:
 94c:	00 24       	eor	r0, r0
 94e:	0a 94       	dec	r0
 950:	12 16       	cp	r1, r18
 952:	13 06       	cpc	r1, r19
 954:	14 06       	cpc	r1, r20
 956:	05 06       	cpc	r0, r21
 958:	08 95       	ret

0000095a <__fp_round>:
 95a:	09 2e       	mov	r0, r25
 95c:	03 94       	inc	r0
 95e:	00 0c       	add	r0, r0
 960:	11 f4       	brne	.+4      	; 0x966 <__fp_round+0xc>
 962:	88 23       	and	r24, r24
 964:	52 f0       	brmi	.+20     	; 0x97a <__fp_round+0x20>
 966:	bb 0f       	add	r27, r27
 968:	40 f4       	brcc	.+16     	; 0x97a <__fp_round+0x20>
 96a:	bf 2b       	or	r27, r31
 96c:	11 f4       	brne	.+4      	; 0x972 <__fp_round+0x18>
 96e:	60 ff       	sbrs	r22, 0
 970:	04 c0       	rjmp	.+8      	; 0x97a <__fp_round+0x20>
 972:	6f 5f       	subi	r22, 0xFF	; 255
 974:	7f 4f       	sbci	r23, 0xFF	; 255
 976:	8f 4f       	sbci	r24, 0xFF	; 255
 978:	9f 4f       	sbci	r25, 0xFF	; 255
 97a:	08 95       	ret

0000097c <__fp_split3>:
 97c:	57 fd       	sbrc	r21, 7
 97e:	90 58       	subi	r25, 0x80	; 128
 980:	44 0f       	add	r20, r20
 982:	55 1f       	adc	r21, r21
 984:	59 f0       	breq	.+22     	; 0x99c <__fp_splitA+0x10>
 986:	5f 3f       	cpi	r21, 0xFF	; 255
 988:	71 f0       	breq	.+28     	; 0x9a6 <__fp_splitA+0x1a>
 98a:	47 95       	ror	r20

0000098c <__fp_splitA>:
 98c:	88 0f       	add	r24, r24
 98e:	97 fb       	bst	r25, 7
 990:	99 1f       	adc	r25, r25
 992:	61 f0       	breq	.+24     	; 0x9ac <__fp_splitA+0x20>
 994:	9f 3f       	cpi	r25, 0xFF	; 255
 996:	79 f0       	breq	.+30     	; 0x9b6 <__fp_splitA+0x2a>
 998:	87 95       	ror	r24
 99a:	08 95       	ret
 99c:	12 16       	cp	r1, r18
 99e:	13 06       	cpc	r1, r19
 9a0:	14 06       	cpc	r1, r20
 9a2:	55 1f       	adc	r21, r21
 9a4:	f2 cf       	rjmp	.-28     	; 0x98a <__fp_split3+0xe>
 9a6:	46 95       	lsr	r20
 9a8:	f1 df       	rcall	.-30     	; 0x98c <__fp_splitA>
 9aa:	08 c0       	rjmp	.+16     	; 0x9bc <__fp_splitA+0x30>
 9ac:	16 16       	cp	r1, r22
 9ae:	17 06       	cpc	r1, r23
 9b0:	18 06       	cpc	r1, r24
 9b2:	99 1f       	adc	r25, r25
 9b4:	f1 cf       	rjmp	.-30     	; 0x998 <__fp_splitA+0xc>
 9b6:	86 95       	lsr	r24
 9b8:	71 05       	cpc	r23, r1
 9ba:	61 05       	cpc	r22, r1
 9bc:	08 94       	sec
 9be:	08 95       	ret

000009c0 <__fp_zero>:
 9c0:	e8 94       	clt

000009c2 <__fp_szero>:
 9c2:	bb 27       	eor	r27, r27
 9c4:	66 27       	eor	r22, r22
 9c6:	77 27       	eor	r23, r23
 9c8:	cb 01       	movw	r24, r22
 9ca:	97 f9       	bld	r25, 7
 9cc:	08 95       	ret

000009ce <__mulsf3>:
 9ce:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__mulsf3x>
 9d2:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__fp_round>
 9d6:	0e 94 9f 04 	call	0x93e	; 0x93e <__fp_pscA>
 9da:	38 f0       	brcs	.+14     	; 0x9ea <__mulsf3+0x1c>
 9dc:	0e 94 a6 04 	call	0x94c	; 0x94c <__fp_pscB>
 9e0:	20 f0       	brcs	.+8      	; 0x9ea <__mulsf3+0x1c>
 9e2:	95 23       	and	r25, r21
 9e4:	11 f0       	breq	.+4      	; 0x9ea <__mulsf3+0x1c>
 9e6:	0c 94 96 04 	jmp	0x92c	; 0x92c <__fp_inf>
 9ea:	0c 94 9c 04 	jmp	0x938	; 0x938 <__fp_nan>
 9ee:	11 24       	eor	r1, r1
 9f0:	0c 94 e1 04 	jmp	0x9c2	; 0x9c2 <__fp_szero>

000009f4 <__mulsf3x>:
 9f4:	0e 94 be 04 	call	0x97c	; 0x97c <__fp_split3>
 9f8:	70 f3       	brcs	.-36     	; 0x9d6 <__mulsf3+0x8>

000009fa <__mulsf3_pse>:
 9fa:	95 9f       	mul	r25, r21
 9fc:	c1 f3       	breq	.-16     	; 0x9ee <__mulsf3+0x20>
 9fe:	95 0f       	add	r25, r21
 a00:	50 e0       	ldi	r21, 0x00	; 0
 a02:	55 1f       	adc	r21, r21
 a04:	62 9f       	mul	r22, r18
 a06:	f0 01       	movw	r30, r0
 a08:	72 9f       	mul	r23, r18
 a0a:	bb 27       	eor	r27, r27
 a0c:	f0 0d       	add	r31, r0
 a0e:	b1 1d       	adc	r27, r1
 a10:	63 9f       	mul	r22, r19
 a12:	aa 27       	eor	r26, r26
 a14:	f0 0d       	add	r31, r0
 a16:	b1 1d       	adc	r27, r1
 a18:	aa 1f       	adc	r26, r26
 a1a:	64 9f       	mul	r22, r20
 a1c:	66 27       	eor	r22, r22
 a1e:	b0 0d       	add	r27, r0
 a20:	a1 1d       	adc	r26, r1
 a22:	66 1f       	adc	r22, r22
 a24:	82 9f       	mul	r24, r18
 a26:	22 27       	eor	r18, r18
 a28:	b0 0d       	add	r27, r0
 a2a:	a1 1d       	adc	r26, r1
 a2c:	62 1f       	adc	r22, r18
 a2e:	73 9f       	mul	r23, r19
 a30:	b0 0d       	add	r27, r0
 a32:	a1 1d       	adc	r26, r1
 a34:	62 1f       	adc	r22, r18
 a36:	83 9f       	mul	r24, r19
 a38:	a0 0d       	add	r26, r0
 a3a:	61 1d       	adc	r22, r1
 a3c:	22 1f       	adc	r18, r18
 a3e:	74 9f       	mul	r23, r20
 a40:	33 27       	eor	r19, r19
 a42:	a0 0d       	add	r26, r0
 a44:	61 1d       	adc	r22, r1
 a46:	23 1f       	adc	r18, r19
 a48:	84 9f       	mul	r24, r20
 a4a:	60 0d       	add	r22, r0
 a4c:	21 1d       	adc	r18, r1
 a4e:	82 2f       	mov	r24, r18
 a50:	76 2f       	mov	r23, r22
 a52:	6a 2f       	mov	r22, r26
 a54:	11 24       	eor	r1, r1
 a56:	9f 57       	subi	r25, 0x7F	; 127
 a58:	50 40       	sbci	r21, 0x00	; 0
 a5a:	9a f0       	brmi	.+38     	; 0xa82 <__mulsf3_pse+0x88>
 a5c:	f1 f0       	breq	.+60     	; 0xa9a <__mulsf3_pse+0xa0>
 a5e:	88 23       	and	r24, r24
 a60:	4a f0       	brmi	.+18     	; 0xa74 <__mulsf3_pse+0x7a>
 a62:	ee 0f       	add	r30, r30
 a64:	ff 1f       	adc	r31, r31
 a66:	bb 1f       	adc	r27, r27
 a68:	66 1f       	adc	r22, r22
 a6a:	77 1f       	adc	r23, r23
 a6c:	88 1f       	adc	r24, r24
 a6e:	91 50       	subi	r25, 0x01	; 1
 a70:	50 40       	sbci	r21, 0x00	; 0
 a72:	a9 f7       	brne	.-22     	; 0xa5e <__mulsf3_pse+0x64>
 a74:	9e 3f       	cpi	r25, 0xFE	; 254
 a76:	51 05       	cpc	r21, r1
 a78:	80 f0       	brcs	.+32     	; 0xa9a <__mulsf3_pse+0xa0>
 a7a:	0c 94 96 04 	jmp	0x92c	; 0x92c <__fp_inf>
 a7e:	0c 94 e1 04 	jmp	0x9c2	; 0x9c2 <__fp_szero>
 a82:	5f 3f       	cpi	r21, 0xFF	; 255
 a84:	e4 f3       	brlt	.-8      	; 0xa7e <__mulsf3_pse+0x84>
 a86:	98 3e       	cpi	r25, 0xE8	; 232
 a88:	d4 f3       	brlt	.-12     	; 0xa7e <__mulsf3_pse+0x84>
 a8a:	86 95       	lsr	r24
 a8c:	77 95       	ror	r23
 a8e:	67 95       	ror	r22
 a90:	b7 95       	ror	r27
 a92:	f7 95       	ror	r31
 a94:	e7 95       	ror	r30
 a96:	9f 5f       	subi	r25, 0xFF	; 255
 a98:	c1 f7       	brne	.-16     	; 0xa8a <__mulsf3_pse+0x90>
 a9a:	fe 2b       	or	r31, r30
 a9c:	88 0f       	add	r24, r24
 a9e:	91 1d       	adc	r25, r1
 aa0:	96 95       	lsr	r25
 aa2:	87 95       	ror	r24
 aa4:	97 f9       	bld	r25, 7
 aa6:	08 95       	ret

00000aa8 <_exit>:
 aa8:	f8 94       	cli

00000aaa <__stop_program>:
 aaa:	ff cf       	rjmp	.-2      	; 0xaaa <__stop_program>
